<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 这个文件是固定的，基本不会改动，所以之后复制粘贴即可 -->

    <!-- (必填)自动扫描包，让指定包下的注解生效,由IOC容器统一管理 -->
    <context:component-scan base-package="com.odas.controller"/>
    <!-- 让Spring MVC不处理静态资源 .css .js .html .mp3 .mp4等 -->
    <mvc:default-servlet-handler />
    <!--
    (必填)支持mvc注解驱动
        在spring中一般采用@RequestMapping注解来完成映射关系
        要想使@RequestMapping注解生效
        必须向上下文中注册DefaultAnnotationHandlerMapping
        和一个AnnotationMethodHandlerAdapter实例
        这两个实例分别在类级别和方法级别处理。
        而annotation-driven配置帮助我们自动完成上述两个实例的注入。
        新增: 解决开的接口返回json乱码问题，直接复制下面annotation-driven内容即可
        注意这里对配置只是解决controller那里返回对json内容是乱码而已
        并且controller如果要返回json的话，需要导入至少一个人json依赖
     -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 把String转为utf-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                        <property name="failOnEmptyBeans" value="false"/>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          id="internalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <!-- 后缀 -->
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- 拦截器配置, 这次我们用的是spring的拦截器，所以配置在applicationContext -->
    <!-- 我们可以说，拦截器是aop思想的一个运用 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 两个*代表包括这个请求下面的所有请求，就是递归包含 -->
            <!-- 例如: /a1有效，/a1/a2这种a2是a1下面的请求也会生效 -->
            <!-- 如下/**就代表所有请求了 -->
            <mvc:mapping path="/**"/>
            <bean class="com.odas.config.MyInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/user/**"/>
            <bean class="com.odas.config.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

</beans>